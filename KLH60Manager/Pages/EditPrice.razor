@page "/products/editprices/{id}"
@if (product != null)
{
    <h3>Editing @product.Description</h3>

    <EditForm Model="product" OnValidSubmit="Edit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group row">
            <label for="buy" class="col-sm-2 col-form-label">Buy price</label>
            <InputNumber id="buy" class="form-control" placeholder="Product Buy price" @bind-Value="product.BuyPrice" />
            <ValidationMessage For="@(()=>product.BuyPrice)" />
        </div>
        <div class="form-group row">
            <label for="sell" class="col-sm-2 col-form-label">Sell price</label>
            <InputNumber id="sell" class="form-control" placeholder="Product Sell Price" @bind-Value="product.SellPrice" />
            <ValidationMessage For="@(()=>product.SellPrice)" />
        </div>
        <button type="submit" class="btn btn-primary">Update Prices</button>
    </EditForm>
    if (result != null)
    {
        <p>@result</p>
    }
}
else
{
    <p>Loading Product Details...</p>
}
@code {
    [Parameter]
    public string id { get; set; }
    private Product product { get; set; }
    private IEnumerable<ProductCategory> categories { get; set; }
    private string result { get; set; }

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await new Product().GetProduct(int.Parse(id));
        categories = await new ProductCategory().GetAllCategories();
    }
    private async Task Edit()
    {
        HttpResponseMessage res;
        try
        {
            res = await product.UpdatePrices();
            switch (res.StatusCode)
            {
                case HttpStatusCode.NoContent:
                    NavManager.NavigateTo("/products");
                    break;

                case HttpStatusCode.BadRequest:
                case HttpStatusCode.InternalServerError:
                    string err = await res.Content.ReadAsStringAsync();
                    result = err.Substring(err.IndexOf(":") + 1, err.IndexOf("\r\n") - err.IndexOf(":"));
                    break;
            }
        }
        catch (Exception e)
        {
            result = e.Message;
        }
    }
}